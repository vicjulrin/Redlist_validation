# Load libraries ####
packages_list<- c("this.path", "dplyr","terra","red", "rredlist","ggplot2", "pbapply", "tibble", "plyr", "ggpubr")
packagesPrev<- .packages(all.available = TRUE)
lapply(packages_list, function(x) {   if ( ! x %in% packagesPrev ) { install.packages(x, force=T)}    })
lapply(packages_list, library, character.only = TRUE)
# Define inputs ####
##  IUCN token ####
output<- file.path(this.path::this.path(), "output"); dir.create(output)
token <- "f33e69dfa9b06a6495aca3b049606f6e08ceb37083ff88a9c7c9dfbcd56a9121" # Token IUCN
country<- "Colombia"
UICN_isocode <- rredlist::rl_countries(key = token)$results %>% dplyr::filter(country %in% input$country) %>% {.$isocode}
UICN_isocode <- rredlist::rl_countries(key = token)$results %>% dplyr::filter(country %in% country) %>% {.$isocode}
UICN_isocode
rredlist::rl_countries(key = token)$results
UICN_isocode <- rredlist::rl_countries(key = token)$results
View(UICN_isocode)
country<- "Colombia"
rredlist::rl_countries(key = token)$results %>% dplyr::filter(country %in% country)
rredlist::rl_countries(key = token)$results %>% dplyr::filter(country == country)
country
rredlist::rl_countries(key = token)$results %>% dplyr::filter(country == country_name)
country_name<- "Colombia"
rredlist::rl_countries(key = token)$results %>% dplyr::filter(country == country_name) %>% {.$isocode}
UICN_isocode
UICN_country <- rredlist::rl_sp_country(country= UICN_isocode, key = token)$result
UICN_country <- rredlist::rl_sp_country(country= UICN_isocode, key = token)
## Load sp country ####
UICN_isocode <- rredlist::rl_countries(key = token)$results %>% dplyr::filter(country == country_name) %>% {.$isocode}
UICN_country <- rredlist::rl_sp_country(country= UICN_isocode, key = token)
IUCN_sp_Taxon <- rredlist::rl_comp_groups(group = input$taxonomic_group, key = token)$result
UICN_taxon <- rredlist::rl_comp_groups(group = taxonomic_group, key = token)$result
UICN_taxon <- rredlist::rl_comp_groups(group = taxonomic_group, key = token)$result
taxonomic_group<- "crocodiles_and_alligators" # grupo taxonomico de interes
UICN_taxon <- rredlist::rl_comp_groups(group = taxonomic_group, key = token)$result
IUCN_sp_Taxon<- UICN_taxon %>% dplyr::filter(taxonid %in% UICN_country$taxonid)
IUCN_sp_Taxon
UICN_taxon
UICN_country$taxonid
UICN_country
UICN_isocode <- rredlist::rl_countries(key = token)$results %>% dplyr::filter(country == country_name) %>% {.$isocode}
UICN_country <- rredlist::rl_sp_country(country= UICN_isocode, key = token)$result
## Load sp taxonomic group ####
UICN_taxon <- rredlist::rl_comp_groups(group = taxonomic_group, key = token)$result
## Filter country list by taxonomic group ####
IUCN_sp_Taxon<- UICN_taxon %>% dplyr::filter(taxonid %in% UICN_country$taxonid)
## Obtener evaluacion historica de las especies listadas por taxon ####
historyAssesment_data <- iucn_history_assessment_data <- pbapply::pblapply(IUCN_sp_Taxon[, "scientific_name"], function(x) {
tryCatch({
rredlist::rl_history(name = x, key = token)$result %>% dplyr::mutate(scientific_name= x)
}, error = function(e) {NULL})
}) %>% plyr::rbind.fill() %>% list(IUCN_sp_Taxon) %>% plyr::join_all(match = "first")
## Ajustar como matriz ####
form_matrix <- as.formula(paste0("scientific_name", "~", "assess_year"))
historyAssesment_matrix <-   reshape2::dcast(historyAssesment_data, form_matrix,  value.var = "code",
fun.aggregate = function(x) {unique(x)[1]}) %>% tibble::column_to_rownames("scientific_name") %>% as.data.frame.matrix()
## Corregir categorias ####
adjust_categories<- data.frame(Cat_IUCN= c("CR", NA, "EN", "EN", NA, NA, "LC", "LC", "LC", "NT",  "NT", "RE", "VU", "VU"),
code= c("CR", "DD", "E", "EN", "I", "K", "LC", "LR/cd", "LR/lc", "LR/nt",  "NT", "R", "V", "VU"))
RedList_matrix<- historyAssesment_matrix %>% as.matrix()
for(i in seq(nrow(adjust_categories))){
RedList_matrix[ which(RedList_matrix== adjust_categories[i,]$code, arr.ind = TRUE) ]<- adjust_categories[i,]$Cat_IUCN
}
for(j in unique(adjust_categories$Cat_IUCN)){
key<- c(tolower(j), toupper(j), j) %>% paste0(collapse = "|")
RedList_matrix[ which(grepl(key, RedList_matrix), arr.ind = T) ]    <- j
}
RedList_matrix[which( (!RedList_matrix %in% adjust_categories$Cat_IUCN)  & !is.na(RedList_matrix) , arr.ind = TRUE )]<-NA
openxlsx::write.xlsx(RedList_matrix, "RedList_matrix.xlsx")
## Ajustar matriz
### Eliminar las especies que no aportan a la estimación. Menos de dos años con dato de categorización  ####
RedList_matrix_2<- RedList_matrix[rowSums(!is.na(RedList_matrix))>=2,]
### Asignar los años no evaluados NA con datos del año de ultima evaluacion ####
replace_na_with_previous <- function(df, target_col) {
for (col in (target_col-1):2) {
df[[target_col]] <- ifelse(is.na(df[[target_col]]), df[[col]], df[[target_col]])
}; return(df) }
df = RedList_matrix_2 %>% as.data.frame.matrix()
for(k in 2:ncol(RedList_matrix_2)){ df <- replace_na_with_previous(df, k) }
### Eliminar las especies que no han sido evaluadas antes del año de base, en este caso input ano_base ####
base_year_index <- which(names(df) == as.character(ano_base))
output<- file.path(this.path::this.path(), "output"); dir.create(output)
this.path::this.path()
output<- file.path(dirname(this.path::this.path()), "output"); dir.create(output)
output
openxlsx::write.xlsx(IUCN_sp_Taxon, file.path(output, "IUCN_sp_Taxon.xlsx") )
output
# Load libraries ####
packages_list<- c("this.path", "dplyr","terra","red", "rredlist","ggplot2", "pbapply", "tibble", "plyr", "ggpubr")
packagesPrev<- .packages(all.available = TRUE)
lapply(packages_list, function(x) {   if ( ! x %in% packagesPrev ) { install.packages(x, force=T)}    })
lapply(packages_list, library, character.only = TRUE)
# Define inputs ####
##  IUCN token ####
output<- file.path(dirname(this.path::this.path()), "output"); dir.create(output)
token <- "f33e69dfa9b06a6495aca3b049606f6e08ceb37083ff88a9c7c9dfbcd56a9121" # Token IUCN
country_name<- "Colombia"
taxonomic_group<- "crocodiles_and_alligators" # grupo taxonomico de interes
ano_base<- 2000 # año de inicio de estimación
# Script ####
## Load sp country ####
UICN_isocode <- rredlist::rl_countries(key = token)$results %>% dplyr::filter(country == country_name) %>% {.$isocode}
UICN_country <- rredlist::rl_sp_country(country= UICN_isocode, key = token)$result
